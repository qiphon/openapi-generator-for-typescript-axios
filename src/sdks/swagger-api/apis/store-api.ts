/* eslint-disable */
/**
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at <a href=\"http://swagger.io\">http://swagger.io</a> or on irc.freenode.net, #swagger.  For this sample, you can use the api key \"special-key\" to test the authorization filters
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { baseURL } from '@api/request';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  assertParamExists,
  setApiKeyToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common';
// @ts-ignore
import { BASE_PATH, RequestArgs } from '../base';
// @ts-ignore
import { Order } from '../models';

let configuration: Configuration | undefined = undefined;

/**
 * StoreApi - axios parameter creator
 * @export
 */

/**
 * For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
 * @summary Delete purchase order by ID
 * @param {string} orderId ID of the order that needs to be deleted
 * @param {*} [axiosRequestConfigOptions] Override http request option.
 * @throws {RequiredError}
 */
const deleteOrderAxiosParamCreatorStoreApi = async (
  orderId: string,
  axiosRequestConfigOptions: AxiosRequestConfig = {},
): Promise<RequestArgs> => {
  // verify required parameter 'orderId' is not null or undefined
  assertParamExists('deleteOrder', 'orderId', orderId);
  const localVarPath = `/store/order/{orderId}`.replace(
    `{${'orderId'}}`,
    encodeURIComponent(String(orderId)),
  );
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, 'https://qiphon.blog.csdn.net/');
  let baseOptions;
  if (configuration) {
    baseOptions = configuration.baseOptions;
  }

  const localVarRequestOptions = {
    method: 'DELETE',
    ...baseOptions,
    ...axiosRequestConfigOptions,
  };
  const localVarHeaderParameter = {} as any;
  const localVarQueryParameter = {} as any;

  setSearchParams(localVarUrlObj, localVarQueryParameter);
  let headersFromBaseOptions =
    baseOptions && baseOptions.headers ? baseOptions.headers : {};
  localVarRequestOptions.headers = {
    ...localVarHeaderParameter,
    ...headersFromBaseOptions,
    ...axiosRequestConfigOptions.headers,
  };

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  };
};
/**
 * Returns a map of status codes to quantities
 * @summary Returns pet inventories by status
 * @param {*} [axiosRequestConfigOptions] Override http request option.
 * @throws {RequiredError}
 */
const getInventoryAxiosParamCreatorStoreApi = async (
  axiosRequestConfigOptions: AxiosRequestConfig = {},
): Promise<RequestArgs> => {
  const localVarPath = `/store/inventory`;
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, 'https://qiphon.blog.csdn.net/');
  let baseOptions;
  if (configuration) {
    baseOptions = configuration.baseOptions;
  }

  const localVarRequestOptions = {
    method: 'GET',
    ...baseOptions,
    ...axiosRequestConfigOptions,
  };
  const localVarHeaderParameter = {} as any;
  const localVarQueryParameter = {} as any;

  // authentication api_key required
  await setApiKeyToObject(localVarHeaderParameter, 'api_key', configuration);

  setSearchParams(localVarUrlObj, localVarQueryParameter);
  let headersFromBaseOptions =
    baseOptions && baseOptions.headers ? baseOptions.headers : {};
  localVarRequestOptions.headers = {
    ...localVarHeaderParameter,
    ...headersFromBaseOptions,
    ...axiosRequestConfigOptions.headers,
  };

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  };
};
/**
 * For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions
 * @summary Find purchase order by ID
 * @param {string} orderId ID of pet that needs to be fetched
 * @param {*} [axiosRequestConfigOptions] Override http request option.
 * @throws {RequiredError}
 */
const getOrderByIdAxiosParamCreatorStoreApi = async (
  orderId: string,
  axiosRequestConfigOptions: AxiosRequestConfig = {},
): Promise<RequestArgs> => {
  // verify required parameter 'orderId' is not null or undefined
  assertParamExists('getOrderById', 'orderId', orderId);
  const localVarPath = `/store/order/{orderId}`.replace(
    `{${'orderId'}}`,
    encodeURIComponent(String(orderId)),
  );
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, 'https://qiphon.blog.csdn.net/');
  let baseOptions;
  if (configuration) {
    baseOptions = configuration.baseOptions;
  }

  const localVarRequestOptions = {
    method: 'GET',
    ...baseOptions,
    ...axiosRequestConfigOptions,
  };
  const localVarHeaderParameter = {} as any;
  const localVarQueryParameter = {} as any;

  setSearchParams(localVarUrlObj, localVarQueryParameter);
  let headersFromBaseOptions =
    baseOptions && baseOptions.headers ? baseOptions.headers : {};
  localVarRequestOptions.headers = {
    ...localVarHeaderParameter,
    ...headersFromBaseOptions,
    ...axiosRequestConfigOptions.headers,
  };

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  };
};
/**
 *
 * @summary Place an order for a pet
 * @param {Order} [body] order placed for purchasing the pet
 * @param {*} [axiosRequestConfigOptions] Override http request option.
 * @throws {RequiredError}
 */
const placeOrderAxiosParamCreatorStoreApi = async (
  body?: Order,
  axiosRequestConfigOptions: AxiosRequestConfig = {},
): Promise<RequestArgs> => {
  const localVarPath = `/store/order`;
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, 'https://qiphon.blog.csdn.net/');
  let baseOptions;
  if (configuration) {
    baseOptions = configuration.baseOptions;
  }

  const localVarRequestOptions = {
    method: 'POST',
    ...baseOptions,
    ...axiosRequestConfigOptions,
  };
  const localVarHeaderParameter = {} as any;
  const localVarQueryParameter = {} as any;

  localVarHeaderParameter['Content-Type'] = 'application/json';

  setSearchParams(localVarUrlObj, localVarQueryParameter);
  let headersFromBaseOptions =
    baseOptions && baseOptions.headers ? baseOptions.headers : {};
  localVarRequestOptions.headers = {
    ...localVarHeaderParameter,
    ...headersFromBaseOptions,
    ...axiosRequestConfigOptions.headers,
  };
  localVarRequestOptions.data = serializeDataIfNeeded(
    body,
    localVarRequestOptions,
    configuration,
  );

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  };
};

/**
 * StoreApi - functional programming interface
 * @export
 */

/**
 * For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
 * @summary Delete purchase order by ID
 * @param {string} orderId ID of the order that needs to be deleted
 * @param {*} [axiosRequestConfigOptions] Override http request option.
 * @throws {RequiredError}
 */
export const deleteOrderStoreApi = async (
  orderId: string,
  axiosRequestConfigOptions?: AxiosRequestConfig,
) => {
  const localVarAxiosArgs = await deleteOrderAxiosParamCreatorStoreApi(
    orderId,
    { baseURL, ...axiosRequestConfigOptions },
  );
  return createRequestFunction<void>(
    localVarAxiosArgs,
    globalAxios,
    BASE_PATH,
    configuration,
  );
};
/**
 * Returns a map of status codes to quantities
 * @summary Returns pet inventories by status
 * @param {*} [axiosRequestConfigOptions] Override http request option.
 * @throws {RequiredError}
 */
export const getInventoryStoreApi = async (
  axiosRequestConfigOptions?: AxiosRequestConfig,
) => {
  const localVarAxiosArgs = await getInventoryAxiosParamCreatorStoreApi({
    baseURL,
    ...axiosRequestConfigOptions,
  });
  return createRequestFunction<{ [key: string]: number | undefined }>(
    localVarAxiosArgs,
    globalAxios,
    BASE_PATH,
    configuration,
  );
};
/**
 * For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions
 * @summary Find purchase order by ID
 * @param {string} orderId ID of pet that needs to be fetched
 * @param {*} [axiosRequestConfigOptions] Override http request option.
 * @throws {RequiredError}
 */
export const getOrderByIdStoreApi = async (
  orderId: string,
  axiosRequestConfigOptions?: AxiosRequestConfig,
) => {
  const localVarAxiosArgs = await getOrderByIdAxiosParamCreatorStoreApi(
    orderId,
    { baseURL, ...axiosRequestConfigOptions },
  );
  return createRequestFunction<Order>(
    localVarAxiosArgs,
    globalAxios,
    BASE_PATH,
    configuration,
  );
};
/**
 *
 * @summary Place an order for a pet
 * @param {Order} [body] order placed for purchasing the pet
 * @param {*} [axiosRequestConfigOptions] Override http request option.
 * @throws {RequiredError}
 */
export const placeOrderStoreApi = async (
  body?: Order,
  axiosRequestConfigOptions?: AxiosRequestConfig,
) => {
  const localVarAxiosArgs = await placeOrderAxiosParamCreatorStoreApi(body, {
    baseURL,
    ...axiosRequestConfigOptions,
  });
  return createRequestFunction<Order>(
    localVarAxiosArgs,
    globalAxios,
    BASE_PATH,
    configuration,
  );
};
