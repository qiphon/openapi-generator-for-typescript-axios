/* eslint-disable */
/**
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at <a href=\"http://swagger.io\">http://swagger.io</a> or on irc.freenode.net, #swagger.  For this sample, you can use the api key \"special-key\" to test the authorization filters
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { baseURL } from '@api/request';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  assertParamExists,
  setApiKeyToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common';
// @ts-ignore
import { BASE_PATH, RequestArgs } from '../base';
// @ts-ignore
import { Pet } from '../models';

let configuration: Configuration | undefined = undefined;

/**
 * PetApi - axios parameter creator
 * @export
 */

/**
 *
 * @summary Add a new pet to the store
 * @param {Pet} [body] Pet object that needs to be added to the store
 * @param {*} [axiosRequestConfigOptions] Override http request option.
 * @throws {RequiredError}
 */
const addPetAxiosParamCreatorPetApi = async (
  body?: Pet,
  axiosRequestConfigOptions: AxiosRequestConfig = {},
): Promise<RequestArgs> => {
  const localVarPath = `/pet`;
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, 'https://qiphon.blog.csdn.net/');
  let baseOptions;
  if (configuration) {
    baseOptions = configuration.baseOptions;
  }

  const localVarRequestOptions = {
    method: 'POST',
    ...baseOptions,
    ...axiosRequestConfigOptions,
  };
  const localVarHeaderParameter = {} as any;
  const localVarQueryParameter = {} as any;

  // authentication petstore_auth required
  // oauth required
  await setOAuthToObject(
    localVarHeaderParameter,
    'petstore_auth',
    ['write:pets', 'read:pets'],
    configuration,
  );

  localVarHeaderParameter['Content-Type'] = 'application/json';

  setSearchParams(localVarUrlObj, localVarQueryParameter);
  let headersFromBaseOptions =
    baseOptions && baseOptions.headers ? baseOptions.headers : {};
  localVarRequestOptions.headers = {
    ...localVarHeaderParameter,
    ...headersFromBaseOptions,
    ...axiosRequestConfigOptions.headers,
  };
  localVarRequestOptions.data = serializeDataIfNeeded(
    body,
    localVarRequestOptions,
    configuration,
  );

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  };
};
/**
 *
 * @summary Deletes a pet
 * @param {number} petId Pet id to delete
 * @param {string} [apiKey]
 * @param {*} [axiosRequestConfigOptions] Override http request option.
 * @throws {RequiredError}
 */
const deletePetAxiosParamCreatorPetApi = async (
  petId: number,
  apiKey?: string,
  axiosRequestConfigOptions: AxiosRequestConfig = {},
): Promise<RequestArgs> => {
  // verify required parameter 'petId' is not null or undefined
  assertParamExists('deletePet', 'petId', petId);
  const localVarPath = `/pet/{petId}`.replace(
    `{${'petId'}}`,
    encodeURIComponent(String(petId)),
  );
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, 'https://qiphon.blog.csdn.net/');
  let baseOptions;
  if (configuration) {
    baseOptions = configuration.baseOptions;
  }

  const localVarRequestOptions = {
    method: 'DELETE',
    ...baseOptions,
    ...axiosRequestConfigOptions,
  };
  const localVarHeaderParameter = {} as any;
  const localVarQueryParameter = {} as any;

  // authentication petstore_auth required
  // oauth required
  await setOAuthToObject(
    localVarHeaderParameter,
    'petstore_auth',
    ['write:pets', 'read:pets'],
    configuration,
  );

  if (apiKey !== undefined && apiKey !== null) {
    localVarHeaderParameter['api_key'] = String(apiKey);
  }

  setSearchParams(localVarUrlObj, localVarQueryParameter);
  let headersFromBaseOptions =
    baseOptions && baseOptions.headers ? baseOptions.headers : {};
  localVarRequestOptions.headers = {
    ...localVarHeaderParameter,
    ...headersFromBaseOptions,
    ...axiosRequestConfigOptions.headers,
  };

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  };
};
/**
 * Multiple status values can be provided with comma separated strings
 * @summary Finds Pets by status
 * @param {Array<string>} [status] Status values that need to be considered for filter
 * @param {*} [axiosRequestConfigOptions] Override http request option.
 * @throws {RequiredError}
 */
const findPetsByStatusAxiosParamCreatorPetApi = async (
  status?: Array<string>,
  axiosRequestConfigOptions: AxiosRequestConfig = {},
): Promise<RequestArgs> => {
  const localVarPath = `/pet/findByStatus`;
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, 'https://qiphon.blog.csdn.net/');
  let baseOptions;
  if (configuration) {
    baseOptions = configuration.baseOptions;
  }

  const localVarRequestOptions = {
    method: 'GET',
    ...baseOptions,
    ...axiosRequestConfigOptions,
  };
  const localVarHeaderParameter = {} as any;
  const localVarQueryParameter = {} as any;

  // authentication petstore_auth required
  // oauth required
  await setOAuthToObject(
    localVarHeaderParameter,
    'petstore_auth',
    ['write:pets', 'read:pets'],
    configuration,
  );

  if (status) {
    localVarQueryParameter['status'] = status;
  }

  setSearchParams(localVarUrlObj, localVarQueryParameter);
  let headersFromBaseOptions =
    baseOptions && baseOptions.headers ? baseOptions.headers : {};
  localVarRequestOptions.headers = {
    ...localVarHeaderParameter,
    ...headersFromBaseOptions,
    ...axiosRequestConfigOptions.headers,
  };

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  };
};
/**
 * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
 * @summary Finds Pets by tags
 * @param {Array<string>} [tags] Tags to filter by
 * @param {*} [axiosRequestConfigOptions] Override http request option.
 * @throws {RequiredError}
 */
const findPetsByTagsAxiosParamCreatorPetApi = async (
  tags?: Array<string>,
  axiosRequestConfigOptions: AxiosRequestConfig = {},
): Promise<RequestArgs> => {
  const localVarPath = `/pet/findByTags`;
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, 'https://qiphon.blog.csdn.net/');
  let baseOptions;
  if (configuration) {
    baseOptions = configuration.baseOptions;
  }

  const localVarRequestOptions = {
    method: 'GET',
    ...baseOptions,
    ...axiosRequestConfigOptions,
  };
  const localVarHeaderParameter = {} as any;
  const localVarQueryParameter = {} as any;

  // authentication petstore_auth required
  // oauth required
  await setOAuthToObject(
    localVarHeaderParameter,
    'petstore_auth',
    ['write:pets', 'read:pets'],
    configuration,
  );

  if (tags) {
    localVarQueryParameter['tags'] = tags;
  }

  setSearchParams(localVarUrlObj, localVarQueryParameter);
  let headersFromBaseOptions =
    baseOptions && baseOptions.headers ? baseOptions.headers : {};
  localVarRequestOptions.headers = {
    ...localVarHeaderParameter,
    ...headersFromBaseOptions,
    ...axiosRequestConfigOptions.headers,
  };

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  };
};
/**
 * Returns a pet when ID < 10.  ID > 10 or nonintegers will simulate API error conditions
 * @summary Find pet by ID
 * @param {number} petId ID of pet that needs to be fetched
 * @param {*} [axiosRequestConfigOptions] Override http request option.
 * @throws {RequiredError}
 */
const getPetByIdAxiosParamCreatorPetApi = async (
  petId: number,
  axiosRequestConfigOptions: AxiosRequestConfig = {},
): Promise<RequestArgs> => {
  // verify required parameter 'petId' is not null or undefined
  assertParamExists('getPetById', 'petId', petId);
  const localVarPath = `/pet/{petId}`.replace(
    `{${'petId'}}`,
    encodeURIComponent(String(petId)),
  );
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, 'https://qiphon.blog.csdn.net/');
  let baseOptions;
  if (configuration) {
    baseOptions = configuration.baseOptions;
  }

  const localVarRequestOptions = {
    method: 'GET',
    ...baseOptions,
    ...axiosRequestConfigOptions,
  };
  const localVarHeaderParameter = {} as any;
  const localVarQueryParameter = {} as any;

  // authentication api_key required
  await setApiKeyToObject(localVarHeaderParameter, 'api_key', configuration);

  // authentication petstore_auth required
  // oauth required
  await setOAuthToObject(
    localVarHeaderParameter,
    'petstore_auth',
    ['write:pets', 'read:pets'],
    configuration,
  );

  setSearchParams(localVarUrlObj, localVarQueryParameter);
  let headersFromBaseOptions =
    baseOptions && baseOptions.headers ? baseOptions.headers : {};
  localVarRequestOptions.headers = {
    ...localVarHeaderParameter,
    ...headersFromBaseOptions,
    ...axiosRequestConfigOptions.headers,
  };

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  };
};
/**
 *
 * @summary Update an existing pet
 * @param {Pet} [body] Pet object that needs to be added to the store
 * @param {*} [axiosRequestConfigOptions] Override http request option.
 * @throws {RequiredError}
 */
const updatePetAxiosParamCreatorPetApi = async (
  body?: Pet,
  axiosRequestConfigOptions: AxiosRequestConfig = {},
): Promise<RequestArgs> => {
  const localVarPath = `/pet`;
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, 'https://qiphon.blog.csdn.net/');
  let baseOptions;
  if (configuration) {
    baseOptions = configuration.baseOptions;
  }

  const localVarRequestOptions = {
    method: 'PUT',
    ...baseOptions,
    ...axiosRequestConfigOptions,
  };
  const localVarHeaderParameter = {} as any;
  const localVarQueryParameter = {} as any;

  // authentication petstore_auth required
  // oauth required
  await setOAuthToObject(
    localVarHeaderParameter,
    'petstore_auth',
    ['write:pets', 'read:pets'],
    configuration,
  );

  localVarHeaderParameter['Content-Type'] = 'application/json';

  setSearchParams(localVarUrlObj, localVarQueryParameter);
  let headersFromBaseOptions =
    baseOptions && baseOptions.headers ? baseOptions.headers : {};
  localVarRequestOptions.headers = {
    ...localVarHeaderParameter,
    ...headersFromBaseOptions,
    ...axiosRequestConfigOptions.headers,
  };
  localVarRequestOptions.data = serializeDataIfNeeded(
    body,
    localVarRequestOptions,
    configuration,
  );

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  };
};
/**
 *
 * @summary Updates a pet in the store with form data
 * @param {string} petId ID of pet that needs to be updated
 * @param {string} [name] Updated name of the pet
 * @param {string} [status] Updated status of the pet
 * @param {*} [axiosRequestConfigOptions] Override http request option.
 * @throws {RequiredError}
 */
const updatePetWithFormAxiosParamCreatorPetApi = async (
  petId: string,
  name?: string,
  status?: string,
  axiosRequestConfigOptions: AxiosRequestConfig = {},
): Promise<RequestArgs> => {
  // verify required parameter 'petId' is not null or undefined
  assertParamExists('updatePetWithForm', 'petId', petId);
  const localVarPath = `/pet/{petId}`.replace(
    `{${'petId'}}`,
    encodeURIComponent(String(petId)),
  );
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, 'https://qiphon.blog.csdn.net/');
  let baseOptions;
  if (configuration) {
    baseOptions = configuration.baseOptions;
  }

  const localVarRequestOptions = {
    method: 'POST',
    ...baseOptions,
    ...axiosRequestConfigOptions,
  };
  const localVarHeaderParameter = {} as any;
  const localVarQueryParameter = {} as any;
  const localVarFormParams = new URLSearchParams();

  // authentication petstore_auth required
  // oauth required
  await setOAuthToObject(
    localVarHeaderParameter,
    'petstore_auth',
    ['write:pets', 'read:pets'],
    configuration,
  );

  if (name !== undefined) {
    localVarFormParams.set('name', name as any);
  }

  if (status !== undefined) {
    localVarFormParams.set('status', status as any);
  }

  localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

  setSearchParams(localVarUrlObj, localVarQueryParameter);
  let headersFromBaseOptions =
    baseOptions && baseOptions.headers ? baseOptions.headers : {};
  localVarRequestOptions.headers = {
    ...localVarHeaderParameter,
    ...headersFromBaseOptions,
    ...axiosRequestConfigOptions.headers,
  };
  localVarRequestOptions.data = localVarFormParams.toString();

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  };
};
/**
 *
 * @summary uploads an image
 * @param {number} petId ID of pet to update
 * @param {string} [additionalMetadata] Additional data to pass to server
 * @param {any} [file] file to upload
 * @param {*} [axiosRequestConfigOptions] Override http request option.
 * @throws {RequiredError}
 */
const uploadFileAxiosParamCreatorPetApi = async (
  petId: number,
  additionalMetadata?: string,
  file?: any,
  axiosRequestConfigOptions: AxiosRequestConfig = {},
): Promise<RequestArgs> => {
  // verify required parameter 'petId' is not null or undefined
  assertParamExists('uploadFile', 'petId', petId);
  const localVarPath = `/pet/{petId}/uploadImage`.replace(
    `{${'petId'}}`,
    encodeURIComponent(String(petId)),
  );
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, 'https://qiphon.blog.csdn.net/');
  let baseOptions;
  if (configuration) {
    baseOptions = configuration.baseOptions;
  }

  const localVarRequestOptions = {
    method: 'POST',
    ...baseOptions,
    ...axiosRequestConfigOptions,
  };
  const localVarHeaderParameter = {} as any;
  const localVarQueryParameter = {} as any;
  const localVarFormParams = new ((configuration &&
    configuration.formDataCtor) ||
    FormData)();

  // authentication petstore_auth required
  // oauth required
  await setOAuthToObject(
    localVarHeaderParameter,
    'petstore_auth',
    ['write:pets', 'read:pets'],
    configuration,
  );

  if (additionalMetadata !== undefined) {
    localVarFormParams.append('additionalMetadata', additionalMetadata as any);
  }

  if (file !== undefined) {
    localVarFormParams.append('file', file as any);
  }

  localVarHeaderParameter['Content-Type'] = 'multipart/form-data';

  setSearchParams(localVarUrlObj, localVarQueryParameter);
  let headersFromBaseOptions =
    baseOptions && baseOptions.headers ? baseOptions.headers : {};
  localVarRequestOptions.headers = {
    ...localVarHeaderParameter,
    ...headersFromBaseOptions,
    ...axiosRequestConfigOptions.headers,
  };
  localVarRequestOptions.data = localVarFormParams;

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  };
};

/**
 * PetApi - functional programming interface
 * @export
 */

/**
 *
 * @summary Add a new pet to the store
 * @param {Pet} [body] Pet object that needs to be added to the store
 * @param {*} [axiosRequestConfigOptions] Override http request option.
 * @throws {RequiredError}
 */
export const addPetPetApi = async (
  body?: Pet,
  axiosRequestConfigOptions?: AxiosRequestConfig,
) => {
  const localVarAxiosArgs = await addPetAxiosParamCreatorPetApi(body, {
    baseURL,
    ...axiosRequestConfigOptions,
  });
  return createRequestFunction<void>(
    localVarAxiosArgs,
    globalAxios,
    BASE_PATH,
    configuration,
  );
};
/**
 *
 * @summary Deletes a pet
 * @param {number} petId Pet id to delete
 * @param {string} [apiKey]
 * @param {*} [axiosRequestConfigOptions] Override http request option.
 * @throws {RequiredError}
 */
export const deletePetPetApi = async (
  petId: number,
  apiKey?: string,
  axiosRequestConfigOptions?: AxiosRequestConfig,
) => {
  const localVarAxiosArgs = await deletePetAxiosParamCreatorPetApi(
    petId,
    apiKey,
    { baseURL, ...axiosRequestConfigOptions },
  );
  return createRequestFunction<void>(
    localVarAxiosArgs,
    globalAxios,
    BASE_PATH,
    configuration,
  );
};
/**
 * Multiple status values can be provided with comma separated strings
 * @summary Finds Pets by status
 * @param {Array<string>} [status] Status values that need to be considered for filter
 * @param {*} [axiosRequestConfigOptions] Override http request option.
 * @throws {RequiredError}
 */
export const findPetsByStatusPetApi = async (
  status?: Array<string>,
  axiosRequestConfigOptions?: AxiosRequestConfig,
) => {
  const localVarAxiosArgs = await findPetsByStatusAxiosParamCreatorPetApi(
    status,
    { baseURL, ...axiosRequestConfigOptions },
  );
  return createRequestFunction<Array<Pet>>(
    localVarAxiosArgs,
    globalAxios,
    BASE_PATH,
    configuration,
  );
};
/**
 * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
 * @summary Finds Pets by tags
 * @param {Array<string>} [tags] Tags to filter by
 * @param {*} [axiosRequestConfigOptions] Override http request option.
 * @throws {RequiredError}
 */
export const findPetsByTagsPetApi = async (
  tags?: Array<string>,
  axiosRequestConfigOptions?: AxiosRequestConfig,
) => {
  const localVarAxiosArgs = await findPetsByTagsAxiosParamCreatorPetApi(tags, {
    baseURL,
    ...axiosRequestConfigOptions,
  });
  return createRequestFunction<Array<Pet>>(
    localVarAxiosArgs,
    globalAxios,
    BASE_PATH,
    configuration,
  );
};
/**
 * Returns a pet when ID < 10.  ID > 10 or nonintegers will simulate API error conditions
 * @summary Find pet by ID
 * @param {number} petId ID of pet that needs to be fetched
 * @param {*} [axiosRequestConfigOptions] Override http request option.
 * @throws {RequiredError}
 */
export const getPetByIdPetApi = async (
  petId: number,
  axiosRequestConfigOptions?: AxiosRequestConfig,
) => {
  const localVarAxiosArgs = await getPetByIdAxiosParamCreatorPetApi(petId, {
    baseURL,
    ...axiosRequestConfigOptions,
  });
  return createRequestFunction<Pet>(
    localVarAxiosArgs,
    globalAxios,
    BASE_PATH,
    configuration,
  );
};
/**
 *
 * @summary Update an existing pet
 * @param {Pet} [body] Pet object that needs to be added to the store
 * @param {*} [axiosRequestConfigOptions] Override http request option.
 * @throws {RequiredError}
 */
export const updatePetPetApi = async (
  body?: Pet,
  axiosRequestConfigOptions?: AxiosRequestConfig,
) => {
  const localVarAxiosArgs = await updatePetAxiosParamCreatorPetApi(body, {
    baseURL,
    ...axiosRequestConfigOptions,
  });
  return createRequestFunction<void>(
    localVarAxiosArgs,
    globalAxios,
    BASE_PATH,
    configuration,
  );
};
/**
 *
 * @summary Updates a pet in the store with form data
 * @param {string} petId ID of pet that needs to be updated
 * @param {string} [name] Updated name of the pet
 * @param {string} [status] Updated status of the pet
 * @param {*} [axiosRequestConfigOptions] Override http request option.
 * @throws {RequiredError}
 */
export const updatePetWithFormPetApi = async (
  petId: string,
  name?: string,
  status?: string,
  axiosRequestConfigOptions?: AxiosRequestConfig,
) => {
  const localVarAxiosArgs = await updatePetWithFormAxiosParamCreatorPetApi(
    petId,
    name,
    status,
    { baseURL, ...axiosRequestConfigOptions },
  );
  return createRequestFunction<void>(
    localVarAxiosArgs,
    globalAxios,
    BASE_PATH,
    configuration,
  );
};
/**
 *
 * @summary uploads an image
 * @param {number} petId ID of pet to update
 * @param {string} [additionalMetadata] Additional data to pass to server
 * @param {any} [file] file to upload
 * @param {*} [axiosRequestConfigOptions] Override http request option.
 * @throws {RequiredError}
 */
export const uploadFilePetApi = async (
  petId: number,
  additionalMetadata?: string,
  file?: any,
  axiosRequestConfigOptions?: AxiosRequestConfig,
) => {
  const localVarAxiosArgs = await uploadFileAxiosParamCreatorPetApi(
    petId,
    additionalMetadata,
    file,
    { baseURL, ...axiosRequestConfigOptions },
  );
  return createRequestFunction<void>(
    localVarAxiosArgs,
    globalAxios,
    BASE_PATH,
    configuration,
  );
};
