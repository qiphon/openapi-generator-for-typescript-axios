/* eslint-disable */
/**
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at <a href=\"http://swagger.io\">http://swagger.io</a> or on irc.freenode.net, #swagger.  For this sample, you can use the api key \"special-key\" to test the authorization filters
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { baseURL } from '@api/request';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  assertParamExists,
  setApiKeyToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common';
// @ts-ignore
import { BASE_PATH, RequestArgs } from '../base';
// @ts-ignore
import { User } from '../models';

let configuration: Configuration | undefined = undefined;

/**
 * UserApi - axios parameter creator
 * @export
 */

/**
 * This can only be done by the logged in user.
 * @summary Create user
 * @param {User} [body] Created user object
 * @param {*} [axiosRequestConfigOptions] Override http request option.
 * @throws {RequiredError}
 */
const createUserAxiosParamCreatorUserApi = async (
  body?: User,
  axiosRequestConfigOptions: AxiosRequestConfig = {},
): Promise<RequestArgs> => {
  const localVarPath = `/user`;
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, 'https://qiphon.blog.csdn.net/');
  let baseOptions;
  if (configuration) {
    baseOptions = configuration.baseOptions;
  }

  const localVarRequestOptions = {
    method: 'POST',
    ...baseOptions,
    ...axiosRequestConfigOptions,
  };
  const localVarHeaderParameter = {} as any;
  const localVarQueryParameter = {} as any;

  localVarHeaderParameter['Content-Type'] = 'application/json';

  setSearchParams(localVarUrlObj, localVarQueryParameter);
  let headersFromBaseOptions =
    baseOptions && baseOptions.headers ? baseOptions.headers : {};
  localVarRequestOptions.headers = {
    ...localVarHeaderParameter,
    ...headersFromBaseOptions,
    ...axiosRequestConfigOptions.headers,
  };
  localVarRequestOptions.data = serializeDataIfNeeded(
    body,
    localVarRequestOptions,
    configuration,
  );

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  };
};
/**
 *
 * @summary Creates list of users with given input array
 * @param {Array<User>} [body] List of user object
 * @param {*} [axiosRequestConfigOptions] Override http request option.
 * @throws {RequiredError}
 */
const createUsersWithArrayInputAxiosParamCreatorUserApi = async (
  body?: Array<User>,
  axiosRequestConfigOptions: AxiosRequestConfig = {},
): Promise<RequestArgs> => {
  const localVarPath = `/user/createWithArray`;
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, 'https://qiphon.blog.csdn.net/');
  let baseOptions;
  if (configuration) {
    baseOptions = configuration.baseOptions;
  }

  const localVarRequestOptions = {
    method: 'POST',
    ...baseOptions,
    ...axiosRequestConfigOptions,
  };
  const localVarHeaderParameter = {} as any;
  const localVarQueryParameter = {} as any;

  localVarHeaderParameter['Content-Type'] = 'application/json';

  setSearchParams(localVarUrlObj, localVarQueryParameter);
  let headersFromBaseOptions =
    baseOptions && baseOptions.headers ? baseOptions.headers : {};
  localVarRequestOptions.headers = {
    ...localVarHeaderParameter,
    ...headersFromBaseOptions,
    ...axiosRequestConfigOptions.headers,
  };
  localVarRequestOptions.data = serializeDataIfNeeded(
    body,
    localVarRequestOptions,
    configuration,
  );

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  };
};
/**
 *
 * @summary Creates list of users with given input array
 * @param {Array<User>} [body] List of user object
 * @param {*} [axiosRequestConfigOptions] Override http request option.
 * @throws {RequiredError}
 */
const createUsersWithListInputAxiosParamCreatorUserApi = async (
  body?: Array<User>,
  axiosRequestConfigOptions: AxiosRequestConfig = {},
): Promise<RequestArgs> => {
  const localVarPath = `/user/createWithList`;
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, 'https://qiphon.blog.csdn.net/');
  let baseOptions;
  if (configuration) {
    baseOptions = configuration.baseOptions;
  }

  const localVarRequestOptions = {
    method: 'POST',
    ...baseOptions,
    ...axiosRequestConfigOptions,
  };
  const localVarHeaderParameter = {} as any;
  const localVarQueryParameter = {} as any;

  localVarHeaderParameter['Content-Type'] = 'application/json';

  setSearchParams(localVarUrlObj, localVarQueryParameter);
  let headersFromBaseOptions =
    baseOptions && baseOptions.headers ? baseOptions.headers : {};
  localVarRequestOptions.headers = {
    ...localVarHeaderParameter,
    ...headersFromBaseOptions,
    ...axiosRequestConfigOptions.headers,
  };
  localVarRequestOptions.data = serializeDataIfNeeded(
    body,
    localVarRequestOptions,
    configuration,
  );

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  };
};
/**
 * This can only be done by the logged in user.
 * @summary Delete user
 * @param {string} username The name that needs to be deleted
 * @param {*} [axiosRequestConfigOptions] Override http request option.
 * @throws {RequiredError}
 */
const deleteUserAxiosParamCreatorUserApi = async (
  username: string,
  axiosRequestConfigOptions: AxiosRequestConfig = {},
): Promise<RequestArgs> => {
  // verify required parameter 'username' is not null or undefined
  assertParamExists('deleteUser', 'username', username);
  const localVarPath = `/user/{username}`.replace(
    `{${'username'}}`,
    encodeURIComponent(String(username)),
  );
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, 'https://qiphon.blog.csdn.net/');
  let baseOptions;
  if (configuration) {
    baseOptions = configuration.baseOptions;
  }

  const localVarRequestOptions = {
    method: 'DELETE',
    ...baseOptions,
    ...axiosRequestConfigOptions,
  };
  const localVarHeaderParameter = {} as any;
  const localVarQueryParameter = {} as any;

  setSearchParams(localVarUrlObj, localVarQueryParameter);
  let headersFromBaseOptions =
    baseOptions && baseOptions.headers ? baseOptions.headers : {};
  localVarRequestOptions.headers = {
    ...localVarHeaderParameter,
    ...headersFromBaseOptions,
    ...axiosRequestConfigOptions.headers,
  };

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  };
};
/**
 *
 * @summary Get user by user name
 * @param {string} username The name that needs to be fetched. Use user1 for testing.
 * @param {*} [axiosRequestConfigOptions] Override http request option.
 * @throws {RequiredError}
 */
const getUserByNameAxiosParamCreatorUserApi = async (
  username: string,
  axiosRequestConfigOptions: AxiosRequestConfig = {},
): Promise<RequestArgs> => {
  // verify required parameter 'username' is not null or undefined
  assertParamExists('getUserByName', 'username', username);
  const localVarPath = `/user/{username}`.replace(
    `{${'username'}}`,
    encodeURIComponent(String(username)),
  );
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, 'https://qiphon.blog.csdn.net/');
  let baseOptions;
  if (configuration) {
    baseOptions = configuration.baseOptions;
  }

  const localVarRequestOptions = {
    method: 'GET',
    ...baseOptions,
    ...axiosRequestConfigOptions,
  };
  const localVarHeaderParameter = {} as any;
  const localVarQueryParameter = {} as any;

  setSearchParams(localVarUrlObj, localVarQueryParameter);
  let headersFromBaseOptions =
    baseOptions && baseOptions.headers ? baseOptions.headers : {};
  localVarRequestOptions.headers = {
    ...localVarHeaderParameter,
    ...headersFromBaseOptions,
    ...axiosRequestConfigOptions.headers,
  };

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  };
};
/**
 *
 * @summary Logs user into the system
 * @param {string} [username] The user name for login
 * @param {string} [password] The password for login in clear text
 * @param {*} [axiosRequestConfigOptions] Override http request option.
 * @throws {RequiredError}
 */
const loginUserAxiosParamCreatorUserApi = async (
  username?: string,
  password?: string,
  axiosRequestConfigOptions: AxiosRequestConfig = {},
): Promise<RequestArgs> => {
  const localVarPath = `/user/login`;
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, 'https://qiphon.blog.csdn.net/');
  let baseOptions;
  if (configuration) {
    baseOptions = configuration.baseOptions;
  }

  const localVarRequestOptions = {
    method: 'GET',
    ...baseOptions,
    ...axiosRequestConfigOptions,
  };
  const localVarHeaderParameter = {} as any;
  const localVarQueryParameter = {} as any;

  if (username !== undefined) {
    localVarQueryParameter['username'] = username;
  }

  if (password !== undefined) {
    localVarQueryParameter['password'] = password;
  }

  setSearchParams(localVarUrlObj, localVarQueryParameter);
  let headersFromBaseOptions =
    baseOptions && baseOptions.headers ? baseOptions.headers : {};
  localVarRequestOptions.headers = {
    ...localVarHeaderParameter,
    ...headersFromBaseOptions,
    ...axiosRequestConfigOptions.headers,
  };

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  };
};
/**
 *
 * @summary Logs out current logged in user session
 * @param {*} [axiosRequestConfigOptions] Override http request option.
 * @throws {RequiredError}
 */
const logoutUserAxiosParamCreatorUserApi = async (
  axiosRequestConfigOptions: AxiosRequestConfig = {},
): Promise<RequestArgs> => {
  const localVarPath = `/user/logout`;
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, 'https://qiphon.blog.csdn.net/');
  let baseOptions;
  if (configuration) {
    baseOptions = configuration.baseOptions;
  }

  const localVarRequestOptions = {
    method: 'GET',
    ...baseOptions,
    ...axiosRequestConfigOptions,
  };
  const localVarHeaderParameter = {} as any;
  const localVarQueryParameter = {} as any;

  setSearchParams(localVarUrlObj, localVarQueryParameter);
  let headersFromBaseOptions =
    baseOptions && baseOptions.headers ? baseOptions.headers : {};
  localVarRequestOptions.headers = {
    ...localVarHeaderParameter,
    ...headersFromBaseOptions,
    ...axiosRequestConfigOptions.headers,
  };

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  };
};
/**
 * This can only be done by the logged in user.
 * @summary Updated user
 * @param {string} username name that need to be deleted
 * @param {User} [body] Updated user object
 * @param {*} [axiosRequestConfigOptions] Override http request option.
 * @throws {RequiredError}
 */
const updateUserAxiosParamCreatorUserApi = async (
  username: string,
  body?: User,
  axiosRequestConfigOptions: AxiosRequestConfig = {},
): Promise<RequestArgs> => {
  // verify required parameter 'username' is not null or undefined
  assertParamExists('updateUser', 'username', username);
  const localVarPath = `/user/{username}`.replace(
    `{${'username'}}`,
    encodeURIComponent(String(username)),
  );
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, 'https://qiphon.blog.csdn.net/');
  let baseOptions;
  if (configuration) {
    baseOptions = configuration.baseOptions;
  }

  const localVarRequestOptions = {
    method: 'PUT',
    ...baseOptions,
    ...axiosRequestConfigOptions,
  };
  const localVarHeaderParameter = {} as any;
  const localVarQueryParameter = {} as any;

  localVarHeaderParameter['Content-Type'] = 'application/json';

  setSearchParams(localVarUrlObj, localVarQueryParameter);
  let headersFromBaseOptions =
    baseOptions && baseOptions.headers ? baseOptions.headers : {};
  localVarRequestOptions.headers = {
    ...localVarHeaderParameter,
    ...headersFromBaseOptions,
    ...axiosRequestConfigOptions.headers,
  };
  localVarRequestOptions.data = serializeDataIfNeeded(
    body,
    localVarRequestOptions,
    configuration,
  );

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  };
};

/**
 * UserApi - functional programming interface
 * @export
 */

/**
 * This can only be done by the logged in user.
 * @summary Create user
 * @param {User} [body] Created user object
 * @param {*} [axiosRequestConfigOptions] Override http request option.
 * @throws {RequiredError}
 */
export const createUserUserApi = async (
  body?: User,
  axiosRequestConfigOptions?: AxiosRequestConfig,
) => {
  const localVarAxiosArgs = await createUserAxiosParamCreatorUserApi(body, {
    baseURL,
    ...axiosRequestConfigOptions,
  });
  return createRequestFunction<void>(
    localVarAxiosArgs,
    globalAxios,
    BASE_PATH,
    configuration,
  );
};
/**
 *
 * @summary Creates list of users with given input array
 * @param {Array<User>} [body] List of user object
 * @param {*} [axiosRequestConfigOptions] Override http request option.
 * @throws {RequiredError}
 */
export const createUsersWithArrayInputUserApi = async (
  body?: Array<User>,
  axiosRequestConfigOptions?: AxiosRequestConfig,
) => {
  const localVarAxiosArgs =
    await createUsersWithArrayInputAxiosParamCreatorUserApi(body, {
      baseURL,
      ...axiosRequestConfigOptions,
    });
  return createRequestFunction<void>(
    localVarAxiosArgs,
    globalAxios,
    BASE_PATH,
    configuration,
  );
};
/**
 *
 * @summary Creates list of users with given input array
 * @param {Array<User>} [body] List of user object
 * @param {*} [axiosRequestConfigOptions] Override http request option.
 * @throws {RequiredError}
 */
export const createUsersWithListInputUserApi = async (
  body?: Array<User>,
  axiosRequestConfigOptions?: AxiosRequestConfig,
) => {
  const localVarAxiosArgs =
    await createUsersWithListInputAxiosParamCreatorUserApi(body, {
      baseURL,
      ...axiosRequestConfigOptions,
    });
  return createRequestFunction<void>(
    localVarAxiosArgs,
    globalAxios,
    BASE_PATH,
    configuration,
  );
};
/**
 * This can only be done by the logged in user.
 * @summary Delete user
 * @param {string} username The name that needs to be deleted
 * @param {*} [axiosRequestConfigOptions] Override http request option.
 * @throws {RequiredError}
 */
export const deleteUserUserApi = async (
  username: string,
  axiosRequestConfigOptions?: AxiosRequestConfig,
) => {
  const localVarAxiosArgs = await deleteUserAxiosParamCreatorUserApi(username, {
    baseURL,
    ...axiosRequestConfigOptions,
  });
  return createRequestFunction<void>(
    localVarAxiosArgs,
    globalAxios,
    BASE_PATH,
    configuration,
  );
};
/**
 *
 * @summary Get user by user name
 * @param {string} username The name that needs to be fetched. Use user1 for testing.
 * @param {*} [axiosRequestConfigOptions] Override http request option.
 * @throws {RequiredError}
 */
export const getUserByNameUserApi = async (
  username: string,
  axiosRequestConfigOptions?: AxiosRequestConfig,
) => {
  const localVarAxiosArgs = await getUserByNameAxiosParamCreatorUserApi(
    username,
    { baseURL, ...axiosRequestConfigOptions },
  );
  return createRequestFunction<User>(
    localVarAxiosArgs,
    globalAxios,
    BASE_PATH,
    configuration,
  );
};
/**
 *
 * @summary Logs user into the system
 * @param {string} [username] The user name for login
 * @param {string} [password] The password for login in clear text
 * @param {*} [axiosRequestConfigOptions] Override http request option.
 * @throws {RequiredError}
 */
export const loginUserUserApi = async (
  username?: string,
  password?: string,
  axiosRequestConfigOptions?: AxiosRequestConfig,
) => {
  const localVarAxiosArgs = await loginUserAxiosParamCreatorUserApi(
    username,
    password,
    { baseURL, ...axiosRequestConfigOptions },
  );
  return createRequestFunction<string>(
    localVarAxiosArgs,
    globalAxios,
    BASE_PATH,
    configuration,
  );
};
/**
 *
 * @summary Logs out current logged in user session
 * @param {*} [axiosRequestConfigOptions] Override http request option.
 * @throws {RequiredError}
 */
export const logoutUserUserApi = async (
  axiosRequestConfigOptions?: AxiosRequestConfig,
) => {
  const localVarAxiosArgs = await logoutUserAxiosParamCreatorUserApi({
    baseURL,
    ...axiosRequestConfigOptions,
  });
  return createRequestFunction<void>(
    localVarAxiosArgs,
    globalAxios,
    BASE_PATH,
    configuration,
  );
};
/**
 * This can only be done by the logged in user.
 * @summary Updated user
 * @param {string} username name that need to be deleted
 * @param {User} [body] Updated user object
 * @param {*} [axiosRequestConfigOptions] Override http request option.
 * @throws {RequiredError}
 */
export const updateUserUserApi = async (
  username: string,
  body?: User,
  axiosRequestConfigOptions?: AxiosRequestConfig,
) => {
  const localVarAxiosArgs = await updateUserAxiosParamCreatorUserApi(
    username,
    body,
    { baseURL, ...axiosRequestConfigOptions },
  );
  return createRequestFunction<void>(
    localVarAxiosArgs,
    globalAxios,
    BASE_PATH,
    configuration,
  );
};
